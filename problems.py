"""
Functions to solve Project Euler questions.
"""
import logging

logging.basicConfig(level=logging.INFO, filename='problemLogger.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def euler_1(x):
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    total = 0
    for i in range(x):
        if i % 3 == 0 or i % 5 == 0:
            total += i
    return total

print(f'The answer to problem 1 is {euler_1(1000)}')


def euler_2():
    """
    Each new term in the Fibonacci sequence is generated by adding
    the previous two terms. By starting with 1 and 2, the first 10
    terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose
    values do not exceed four million, find the sum of the even-valued terms.
    """
    a, b = 1, 2
    c = 0
    fib = [1, 2]
    total = 0

    while b < 4000000:
        c = a + b
        fib.append(c)
        a, b = b, c
    for num in fib:
        if num % 2 == 0:
            total += num
    return total

print(f'The answer to problem 2 is {euler_2()}')


def  euler_3():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?
    """
    from libs.primes import largest_prime_factor
    return largest_prime_factor(600851475143)

print(f'The answer to problem 3 is {euler_3()}')


def euler_4():
    """A palindromic number reads the same both ways. The largest
    palindrome made from the product of two 2-digit numbers is
    9009 = 91 × 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    palindrome = 0
    for a in range(999, 100, -1):
        for b in range(999, 100, -1):
            num = a * b
            if str(num) == str(num)[::-1]:
                if num > palindrome:
                    palindrome = num
    return palindrome
print(f'The answer to problem 4 is {euler_4()}')


def euler_5(N):
    """
    2520 is the smallest number that can be divided by each of
    the numbers from 1 to 10 without any remainder.
    What is the smallest positive number that is evenly divisible by
    all of the numbers from 1 to 20?

    BRUTE FORCE METHOD BELOW:
    num_list =[]
    for i in range(20, 0, -1):
        num_list.append(i)
    print(num_list)
    check = 0
    for positive_number in range(2520, 40**8):
        if check == 20:
            print(positive_number)
            return
        for i in num_list:
            if positive_number % i != 0:
                check = 0
                break
            elif positive_number % i == 0:
                check += 1

    Much more efficiently: The below answer which
    calculates maximum powers of prime factors
    using logarithms:
    """

    from libs.primes import prime_dict_generator
    from math import sqrt, log


    primes = prime_dict_generator(N)  # returns list of all primes <=N
    sqrtN = sqrt(N)
    ans = 1
    for p in primes:
        if p <= sqrtN:
            ans *= p ** (int(log(N) / log(p)))
        else:
            ans *= p
    return ans

print(f'The answer to Problem 5 is {euler_5(20)}')


def euler_6(n):
    """
    The sum of the squares of the first ten natural numbers is 385.
    The square of the sum of the first ten natural numbers is 3025.
    Hence the difference between the sum of the squares of the first
    ten natural numbers and the square of the sum is 3025 - 385 = 2640.
    Find the difference between the sum of the squares of the first
    one hundred natural numbers and the square of the sum.
    """

    '''
    BRUTE FORCE METHOD...
    
    from libs.sum_square import sum_of_squares, square_of_sum
    sum_of_squares = sum_of_squares(n)
    square_of_sum = square_of_sum(n)
    return square_of_sum - sum_of_squares
    
    A better version below:
    '''
    square_of_sum = (n*(n+1)/2)**2
    sum_of_squares = (2*n+1)*(n+1)*n/6
    return int(square_of_sum - sum_of_squares)

print(f'The answer to problem 6 is {euler_6(100)}')


def euler_7(n):
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
    we can see that the 6th prime is 13.
    What is the 10 001st prime number?
    """
    from libs.primes import psieve
    primes = psieve()
    for i in range(n):
        last_prime = next(primes)
    return last_prime

print(f'The answer for problem 7 is {euler_7(10001)}')


def euler_8():
    """
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    """
    thousand_digit_number = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
    thousand_digit_string = str(thousand_digit_number)
    highest_number = 0
    # take a thirteen digit slice
    a, b = 0, 13
    while b < 1000:
        product_of_thirteen = 1
        thirteen_digit_slice = thousand_digit_string[a:b]
        for number in thirteen_digit_slice:
            product_of_thirteen *= int(number)
        if product_of_thirteen > highest_number:
            highest_number = product_of_thirteen
        a += 1
        b += 1
    return highest_number

print(f'The answer to problem 8 is {euler_8()}')


def euler_9():
    """
    A Pythagorean triplet is a set of three natural numbers,
    a < b < c, for which, a2 + b2 = c2.
    For example, 32 + 42 = 9 + 16 = 25 = 52.
    There exists exactly one Pythagorean triplet for which
    a + b + c = 1000.
    Find the product abc.
    """
    for a in range(1, 333):
        for b in range(a + 1, 499):
            c = (a ** 2 + b ** 2) ** 0.5  # square root
            if a + b + c == 1000:
                print(f'The solution to problem 9 is {a} * {b} * {c} = {a * b * c}')
                break

euler_9()

def euler_10(below_int):
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million."""
    from libs.primes import psieve
    sum_of_primes = 0
    prime = psieve()
    while(next(prime) < below_int):
        sum_of_primes += prime
    print(f'The answer to problem 10 is {sum_of_primes}')

euler_10(2000000)

